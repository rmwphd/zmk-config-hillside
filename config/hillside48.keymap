/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
// how combos??

#define QWERTY_L 0
#define MINIMAK4_L 1
#define ISRT_L 2
#define NUMPAD_L 3
#define EDIT_L 4
#define FSYM_L 5
#define JSYM_L 6
#define MEDIA_L 7
#define ADJUST_L 8
#define LAYERLEADER_L 9

#define R_UNDO      LG(Z)
#define R_REDO      LG(Y)
#define R_CUT       LG(X)
#define R_COPY      LG(C)
#define R_PASTE     LG(V)
#define R_SAVE      RG(S)
#define NEW_TAB     LG(T)
#define SWP_WND     LG(GRAVE)
#define R_HOME      LG(LEFT)
#define R_END       LG(RIGHT)
#define ZOOM_IN     LG(EQUAL)
#define ZOOM_OUT    LG(MINUS)
#define L_DSK       LC(LEFT)
#define R_DSK       LC(RIGHT)
#define DEL_WRD     LA(BSPC)
#define MVW_LEFT    LA(LEFT) 
#define MVW_RIGHT   LA(RIGHT)
#define SELW_LEFT   LA(RS(LEFT))
#define SELW_RIGHT  LA(RS(RIGHT))
#define TASK_MAN    LG(LA(ESCAPE))
#define SEL_HOME    RS(LG(LEFT))
#define SEL_END     RS(LG(RIGHT))
#define SEL_LEFT    RS(LEFT)
#define SEL_DOWN    RS(DOWN)
#define SEL_RIGHT   RS(RIGHT)
#define R_SCRNSHT   RS(RG(N4))
#define SFTCMD      RS(RGUI)
#define SEL_ALL     RG(A)
#define SWP_APP     RG(TAB)


&sk {
    release-after-ms = <900>;
    quick-release;
};

&lt { quick_tap_ms = <200>; };

// when I get the trackball working, holding down N (or enter??) should mo scrolling mode!
/ {
    combos {
        compatible = "zmk,combos";

    // shortcut
    #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
        combo_##NAME { \
            timeout-ms = <TIMEOUT>; \
            bindings = <BINDINGS>; \
            layers = <0>; \
            key-positions = <KEYPOS>; \
    };

        /*                KEY POSITIONS

          ╭───────────────────────────╮╭─────────────────────────╮
          │  0   1   2   3   4   5    ||    6   7   8   9  10 11 │
          │ 12  13  14  15  16  17    ││    18  19  20  21 22 23 │
          │ 24  25  26  27  28  29 30 ││ 31 32  33  34  35 36 37 │
          ╰───────╮ 38  39  40  41 42 ││ 43 44  45 46 47 ╭───────╯
                  ╰───────────────────╯╰─────────────────╯        */

        COMBO(tab,     &kp TAB,    17 29,    30)
        COMBO(escape,  &kp ESCAPE, 4 5,    30)
        //COMBO(colon,   &kp COLON,  7 8,     30)
        COMBO(sqt,     &kp SQT,    10 22,    30)
        //COMBO(minus,   &kp MINUS,  31 32,   10)
        //COMBO(uscore,  &kp UNDER,  33 34,   10)
        COMBO(dskr,    &kp R_DSK,  22 36,   10)
        COMBO(dskl,    &kp L_DSK,  12 24,   10)
        //COMBO(equal, &kp EQUAL, 12 23, 100)
        //COMBO(enter, &kp ENTER, 17 26, 60)
        // COMBO(reset_l, &bootloader, 0 1 2 3, 100)
        // COMBO(reset_right, &bootloader, 6 7 8 9, 100)
    };

    macros {
        ZMK_MACRO(pair_par, wait-ms = <30>; tap-ms = <40>; bindings = <&kp LPAR &kp RPAR>;)
        ZMK_MACRO(pair_par2, wait-ms = <30>; tap-ms = <40>; bindings = <&kp LPAR &kp RPAR>, <&kp LEFT>;)
        ZMK_MACRO(pair_brc, wait-ms = <30>; tap-ms = <40>; bindings = <&kp LBRC &kp RBRC>;)
        ZMK_MACRO(pair_brc2, wait-ms = <30>; tap-ms = <40>; bindings = <&kp LBRC &kp RBRC>, <&kp LEFT>;)
        ZMK_MACRO(pair_bkt, wait-ms = <30>; tap-ms = <40>; bindings = <&kp LBKT &kp RBKT>;)
        ZMK_MACRO(pair_bkt2, wait-ms = <30>; tap-ms = <40>; bindings = <&kp LBKT &kp RBKT>, <&kp LEFT>;)
        ZMK_MACRO(ltgt_pair, wait-ms = <30>; tap-ms = <40>; bindings = <&kp LT &kp GT>, <&kp LEFT>;)
        };

    behaviors {
        #define TAPDANCE(name,...) \
            name: name { \
            label = ZMK_MACRO_STRINGIFY(ZM_ ## name); \
            compatible = "zmk,behavior-tap-dance"; \
            #binding-cells = <0>; \
            __VA_ARGS__ \
        };
        ht: hold-tap {
                compatible = "zmk,behavior-hold-tap";
                label = "HOLD_TAP";
                #binding-cells = <2>;
                flavor = "hold-preferred";
                tapping-term-ms = <400>;
                quick-tap-ms = <200>;
                bindings = <&kp>, <&kp>;
        };
        TAPDANCE(bkfwd, tapping-term-ms = <300>; bindings = <&kp LG(LEFT)>, <&kp LG(RIGHT)>;)
        TAPDANCE(td1, tapping-term-ms = <300>; bindings = <&sk RGUI>, <&sk RALT>, <&sk RCTRL>;)
        TAPDANCE(td2, tapping-term-ms = <300>; bindings = <&sk RALT>, <&sk RGUI>, <&sk RCTRL>;)
        TAPDANCE(shcaps, tapping-term-ms = <300>; bindings = <&sk LSHIFT>, <&caps_word>;)
        TAPDANCE(td_par_pair, tapping-term-ms = <300>; bindings = <&kp LPAR>, <&pair_par>, <&pair_par2>;)
        TAPDANCE(td_brc_pair, tapping-term-ms = <300>; bindings = <&kp LBRC>, <&pair_brc>, <&pair_brc2>;)
        TAPDANCE(td_bkt_pair, tapping-term-ms = <300>; bindings = <&kp LBKT>, <&pair_bkt>, <&pair_bkt2>;)
    };

    keymap { 
        compatible = "zmk,keymap";

                // QWERTY
        default_layer {
                bindings = <
                &bkfwd        &kp  Q    &kp  W         &kp  E     &kp  R          &kp  T                            &kp  Y    &kp  U        &kp  I        &kp  O     &kp  P            &to LAYERLEADER_L
                &sl  EDIT_L   &kp  A    &lt NUMPAD_L S &kp  D     &lt FSYM_L  F   &kp  G                            &kp  H    &lt JSYM_L J  &kp  K        &kp  L     &lt EDIT_L SEMI   &kp SQT
                &kp  L_DSK    &kp  Z    &kp  X         &kp  C     &kp  V          &kp  B   &kp TAB        &none     &kp  N    &kp  M        &kp  COMMA    &kp  DOT   &lt MEDIA_L SLASH  &kp R_DSK
                              &none     &sk  SFTCMD    &td1       &lt EDIT_L BSPC &shcaps                 &kp ENTER  &lt NUMPAD_L SPACE  &td1   &sk  RCTRL     &none   
                >;

                sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_DN PG_UP>;
        };
		// MINIMAK
        minimak4_layer {
                bindings = <
                &trans   &kp  Q    &kp  W         &kp  D    &kp  R        &kp  K                                           &kp  Y    &kp  U        &kp  I        &kp  O     &kp  P             &trans
                &trans   &kp  A    &lt NUMPAD_L S &kp  T    &lt FSYM_L  F &kp  G                                           &kp  H    &lt JSYM_L J  &kp  E        &kp  L     &lt EDIT_L SEMI    &trans
                &trans   &kp  Z    &kp  X         &kp  C    &kp  V        &kp  B  &trans                           &trans  &kp  N    &kp  M        &kp  COMMA    &kp  DOT   &lt MEDIA_L SLASH  &trans
                &none   &trans     &trans     &trans    &trans         &trans  &trans  &trans    &trans     &none   
                >;

                sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_DN PG_UP>;
        };
		// ISRT
        ISRT_layer {
/* 
 * -------------------------------------------------------------------------------------------------------------------------------------
 * |       |   Q   |   C   |   L   |   M   |   K   |-----------------------------------|   Z   |   F   |   U   |   '   |   ;   |       |
 * |       |   I   |   S   |   R   |   T   |   G   |-----------------------------------|   P   |   N   |   E   |   A   |   O   |       |
 * |       |   Y   |   V   |   W   |   D   |   J   |       |-------------------|       |   B   |   H   |   ,   |   .   |   X   |       |
 * ----------------|       |-------|       |       |       |       |---|       |       |       |       |-------|       |----------------
 */
                bindings = <
                &trans   &kp  Q    &kp  C         &kp  L    &kp  M        &kp  K                            &kp  Z    &kp  F        &kp  U      &kp  SQT   &kp SEMI       &trans
                &trans   &kp  I    &lt NUMPAD_L S &kp  R    &lt FSYM_L  T &kp  G                            &kp  P    &lt JSYM_L N  &kp  E      &kp  A     &lt EDIT_L O   &trans  
                &trans   &kp  Y    &kp  V         &kp  W    &kp  D        &kp  J  &trans            &trans  &kp  B    &kp  H        &kp  COMMA  &kp  DOT   &lt MEDIA_L X  &trans
                                   &none          &trans    &trans        &trans  &trans            &trans  &trans    &trans        &trans      &none   
                >;

                sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_DN PG_UP>;
        };

        num_layer {
                bindings = <
                &mo ADJUST_L &trans     &trans    &kp UP     &trans      &trans                                        &trans   &kp  N7   &kp  N8   &kp  N9     &kp  MINUS   &to QWERTY_L
                &trans       &trans     &kp LEFT  &kp DOWN   &kp RIGHT   &trans                                        &trans   &kp  N4   &kp  N5   &kp  N6     &kp  PLUS    &trans
                &trans       &kp R_UNDO &kp R_CUT &kp R_COPY &kp R_PASTE &kp R_REDO &trans              &trans   &kp N0   &kp  N1   &kp  N2   &kp  N3     &kp  DOT     &trans
                &trans &trans &trans &trans &trans           &trans  &trans  &kp N0  &kp DOT  &trans   

                >;

                sensor-bindings = <&inc_dec_kp C_BRI_DN C_BRI_UP &inc_dec_kp C_BRI_DN C_BRI_UP >;
        };

        edit_layer {
                bindings = <
                &trans &kp TASK_MAN &kp SWP_WND    &kp SELW_LEFT &kp SELW_RIGHT &trans                           &kp NEW_TAB &kp PG_UP &kp UP &kp PG_DN &kp PSCRN &to QWERTY_L
                &trans &kp SEL_ALL  &trans         &kp MVW_LEFT  &kp MVW_RIGHT  &trans                           &kp  R_HOME  &kp LEFT &kp DOWN &kp RIGHT &kp R_END &trans
                &trans &kp R_UNDO   &kp R_CUT &kp R_COPY    &kp R_PASTE    &kp R_REDO &trans        &to QWERTY_L &kp SEL_HOME &kp SEL_LEFT &kp SEL_DOWN &kp SEL_RIGHT &kp SEL_END &trans 
                &trans  &trans  &trans  &trans  &trans                                                   &trans  &trans  &trans  &trans &trans
                >;

                sensor-bindings = <&inc_dec_kp ZOOM_OUT ZOOM_IN &inc_dec_kp R_DSK L_DSK>;
        };

        fsym_layer {
                bindings = <
                &to QWERTY_L &trans &trans &trans &trans &trans                                     &kp CARET &kp AMPS &kp ASTRK &kp GRAVE &trans &trans 
                &trans &trans  &kp TILDE &kp EXCL &trans &trans                                     &kp EQUAL &kp MINUS &kp UNDER &kp BSLH &kp COLON &kp DQT 
                &kp R_DSK  &trans  &trans  &trans  &trans  &trans  &kp ESCAPE                &trans &trans &kp PLUS &kp PIPE &kp SLASH &trans &trans 
                &trans &trans &trans &kp DEL_WRD &trans                    &trans &trans &trans &trans &trans    
                >;

                sensor-bindings = <&inc_dec_kp L_DSK R_DSK &inc_dec_kp ZOOM_OUT ZOOM_IN>;
        };

        jsym_layer {
                bindings = <
                &trans    &kp GRAVE &kp AT    &td_brc_pair &kp RBRC  &trans                         &trans &trans &trans &trans &trans &to QWERTY_L 
                &trans    &kp HASH  &kp DLLR  &td_par_pair &kp RPAR  &ltgt_pair                       &trans &trans &kp QMARK &kp SLASH &kp COLON &kp DQT 
                &kp R_DSK &kp PRCNT &kp CARET &td_bkt_pair &kp RBKT  &trans   &kp ESCAPE     &trans &trans &trans &trans &trans &trans &kp L_DSK
                &trans    &trans   &trans    &trans   &trans         &trans &trans &trans &trans &trans    
                >;
                sensor-bindings = <&inc_dec_kp R_DSK L_DSK &inc_dec_kp ZOOM_OUT ZOOM_IN>;

        };      

        media_layer {
                bindings = <
                &kp F1 &kp F2 &kp F3 &kp F4  &kp F5  &kp F6                                                 &trans &trans &trans &trans &trans &to QWERTY_L
                &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12                                                &trans &trans &trans &trans &trans &trans
                &trans &trans &trans &trans  &trans  &trans  &trans                            &to QWERTY_L &kp R_SCRNSHT &kp C_VOL_DN &kp K_MUTE &kp C_VOL_UP  &trans &trans 
                &trans  &trans  &trans  &trans  &trans            &trans  &kp C_PP  &kp C_PREV  &kp C_NEXT  &trans
                >;

                sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp ZOOM_OUT ZOOM_IN>;
        };


        adj_layer {
                bindings = <
                &none         &to  QWERTY_L &to  MINIMAK4_L &to  ISRT_L &none         &none                                         &none      &kp PRINTSCREEN    &none         &ext_power EP_OFF  &ext_power EP_ON &to QWERTY_L
                &none         &bt  BT_SEL 0 &bt  BT_SEL 1 &bt  BT_SEL 2 &bt  BT_SEL 3 &bt  BT_SEL 4                                 &none      &none              &none         &none              &none            &none
                &bootloader   &none        &none         &out OUT_USB  &out OUT_BLE  &none   &bt BT_CLR                  &none      &none      &none              &none         &none              &none            &trans
                &trans        &trans       &trans        &trans        &trans        &bt BT_CLR                 &trans   &trans     &trans                           &kp  RCTRL   
                >;

                sensor-bindings = <&inc_dec_kp ZOOM_OUT ZOOM_IN &inc_dec_kp PG_DN PG_UP>;
        };


        layerleader_layer {
                bindings = <
                &none  &none &none    &none &none  &none                                 &none  &none      &none       &none  &to NUMPAD_L &to QWERTY_L
                &none  &none &to NUMPAD_L   &none  &to FSYM_L &none                      &none  &to JSYM_L &to FSYM_L  &none  &to EDIT_L   &none
                &none  &none &none    &none &none  &none      &none               &none  &none  &none      &none       &none  &to MEDIA_L  &trans
                             &none    &trans &trans &to EDIT_L &to QWERTY_L       &to QWERTY_L  &to NUMPAD_L  &trans    &trans      &none   
                >;

                sensor-bindings = <&inc_dec_kp ZOOM_OUT ZOOM_IN &inc_dec_kp PG_DN PG_UP>;
        };
};
};